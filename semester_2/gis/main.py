# main.py

from fuzzy_logic import evaluate_risk
from expert_rules import identify_virus_class
from symptom_analysis import get_user_symptoms
from recommendations import get_recommendations
import psutil
import time

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –º–µ—Ç—Ä–∏–∫
def get_current_metrics():
    cpu_val = psutil.cpu_percent(interval=1)
    ram_val = psutil.virtual_memory().percent
    net_val = psutil.net_io_counters().bytes_sent + psutil.net_io_counters().bytes_recv
    net_val_mb = net_val / (1024 * 1024)  # –ú–µ–≥–∞–±–∞–π—Ç–∏ –∑–∞ —á–∞—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É

    proc_val = len(psutil.pids())

    start_time = time.time()
    time.sleep(0.1)  # –®—Ç—É—á–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤—ñ–¥–≥—É–∫—É
    latency_val = (time.time() - start_time) * 1000  # —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –º–µ—Ä–µ–∂—ñ –¥–æ %
    net_val_normalized = min(net_val_mb / 10, 100)  # —É–º–æ–≤–Ω–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è

    return cpu_val, ram_val, net_val_normalized, proc_val, latency_val

def main():
    print("üõ°Ô∏è –ì—ñ–±—Ä–∏–¥–Ω–∞ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ñ—Ä—É—Å–Ω–∏—Ö –∑–∞–≥—Ä–æ–∑ üõ°Ô∏è\n")

    choice = input("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫:\n"
                   "[1] –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É\n"
                   "[2] –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏\n"
                   "–í–∞—à –≤–∏–±—ñ—Ä (1/2): ").strip()

    if choice == '2':
        print("\n–û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤...\n")
        cpu_val, ram_val, net_val, proc_val, latency_val = get_current_metrics()
        print(f"CPU: {cpu_val:.2f}%")
        print(f"RAM: {ram_val:.2f}%")
        print(f"–ú–µ—Ä–µ–∂–∞: {net_val:.2f}% (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ)")
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—ñ–≤: {proc_val}")
        print(f"–ß–∞—Å –≤—ñ–¥–≥—É–∫—É: {latency_val:.2f} –º—Å\n")
    else:
        cpu_val = float(input("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CPU (0-100%): "))
        ram_val = float(input("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è RAM (0-100%): "))
        net_val = float(input("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ (0-100%): "))
        proc_val = int(input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤: "))
        latency_val = float(input("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤—ñ–¥–≥—É–∫—É —Å–∏—Å—Ç–µ–º–∏ (–≤ –º—Å): "))

    # –ê–Ω–∞–ª—ñ–∑ –º–µ—Ç—Ä–∏–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–µ—á—ñ—Ç–∫–æ—ó –ª–æ–≥—ñ–∫–∏
    fuzzy_result = evaluate_risk(cpu_val, ram_val, net_val, proc_val, latency_val)
    print("–ê–Ω–∞–ª—ñ–∑ –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ\n")

    # –Ø–∫—â–æ —Ä–∏–∑–∏–∫ —Ö–æ—á–∞ –± —Å–µ—Ä–µ–¥–Ω—ñ–π, —É—Ç–æ—á–Ω—é—î–º–æ —Å–∏–º–ø—Ç–æ–º–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if fuzzy_result['medium_or_high'] > 0.5:
        user_symptoms = get_user_symptoms()
    else:
        user_symptoms = []
        print("–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑–Ω–∞—á–∏–ª–∞ –Ω–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫, –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ.\n")

    # –í–∏–∫–ª–∏–∫ –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
    result = identify_virus_class(fuzzy_result, user_symptoms)

    # –í–∏–≤—ñ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—É –≤—ñ—Ä—É—Å—É
    print("\nüß¨ –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–ª–∞—Å –∑–∞–≥—Ä–æ–∑–∏:", result['virus_class'])

    # –í–∏–≤—ñ–¥ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ä—ñ—à–µ–Ω–Ω—è
    print("\nüìù –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è:\n")
    print(result['explanation'])

    # –í–∏–≤—ñ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    recommendations = get_recommendations(result['virus_class'], fuzzy_result)
    print("\nüö© –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    for recommendation in recommendations:
        print("-", recommendation)

if __name__ == "__main__":
    main()
